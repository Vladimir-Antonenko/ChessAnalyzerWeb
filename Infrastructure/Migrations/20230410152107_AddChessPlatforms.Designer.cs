// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20230410152107_AddChessPlatforms")]
    partial class AddChessPlatforms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Domain.GameAggregate.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BlackGamer")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Логин игрока с черными фигурами");

                    b.Property<DateTime>("DateGame")
                        .HasColumnType("TEXT")
                        .HasComment("Дата, когда была сыграна партия");

                    b.Property<string>("Pgn")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Pgn данные партии");

                    b.Property<byte?>("Platform")
                        .HasColumnType("INTEGER")
                        .HasComment("Платформа, на которой была сыграна игра");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Строка результата из Pgn");

                    b.Property<string>("WhiteGamer")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Логин игрока с белыми фигурами");

                    b.HasKey("Id");

                    b.HasIndex("BlackGamer");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WhiteGamer");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("Domain.GameAggregate.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Имя/логин игрока");

                    b.HasKey("Id");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Domain.GameAggregate.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fen")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Позиция в стандарте FEN");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER")
                        .HasComment("Идентификатор игры");

                    b.Property<bool>("IsMistake")
                        .HasColumnType("INTEGER")
                        .HasComment("Является ли ход в партии ошибкой");

                    b.Property<int?>("PositionEvaluationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WhoseMove")
                        .HasColumnType("INTEGER")
                        .HasComment("Чей ход в позиции");

                    b.Property<string>("YourMove")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Сделанный в партии ход");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PositionEvaluationId");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("Domain.GameAggregate.PositionEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cp")
                        .HasColumnType("REAL")
                        .HasComment("Оценка позиции");

                    b.Property<int>("Depth")
                        .HasColumnType("INTEGER")
                        .HasComment("Глубина на которой была посчитана оценка");

                    b.Property<string>("Fen")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Позиция в стандарте FEN");

                    b.Property<string>("OneMove")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Сильнейший ход на глубине Depth");

                    b.HasKey("Id");

                    b.ToTable("PositionEvaluations", (string)null);
                });

            modelBuilder.Entity("Domain.GameAggregate.Game", b =>
                {
                    b.HasOne("Domain.GameAggregate.Player", null)
                        .WithMany("Games")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Domain.GameAggregate.Position", b =>
                {
                    b.HasOne("Domain.GameAggregate.Game", "Game")
                        .WithMany("Positions")
                        .HasForeignKey("GameId");

                    b.HasOne("Domain.GameAggregate.PositionEvaluation", "PositionEvaluation")
                        .WithMany()
                        .HasForeignKey("PositionEvaluationId");

                    b.Navigation("Game");

                    b.Navigation("PositionEvaluation");
                });

            modelBuilder.Entity("Domain.GameAggregate.Game", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Domain.GameAggregate.Player", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
